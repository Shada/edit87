#pragma once

#include <vector>
#include "../elm/elm.hpp"
<<<<<<< HEAD
#include "Quadnode.h"
=======
>>>>>>> RESPECT_MAH_AUTHORITAH

struct Vertex
{
	elm::vec3 pos;
	elm::vec3 normal;
	elm::vec2 texCoord;
};

typedef unsigned int uint;

class Terrain
{
private:
<<<<<<< HEAD
	uint width, height, maxDepth;
	float step, normalizerHeight;
=======
	uint width, height;
	float step;
>>>>>>> RESPECT_MAH_AUTHORITAH
	std::vector<elm::vec3> points;

	std::vector<Vertex> vBuffer;
	std::vector<uint> iBuffer;

	elm::vec3 position;

	void normalizeTerrain();
<<<<<<< HEAD
	void normalizeBrushEffect(int startX, int startZ, int cond);

	void createTerrainNormals(std::vector<Vertex> &vBuffer);

	void fillIndexBuffer(int startX, int startY);
	void createQuadTree(int startX, int startY, int depth);

=======

	void createTerrainNormals(std::vector<Vertex> &vBuffer);

>>>>>>> RESPECT_MAH_AUTHORITAH
	void perlinNoise(uint startFrequency, uint frequency, float amplitude, int seed, float persistence = 0.5f);
public:
	Terrain();
	~Terrain();

	/* Camera can only access const functions */
<<<<<<< HEAD
	float getStep() const						{ return step; }
	float getWidth() const						{ return width * step; }
	float getDepth() const						{ return height * step; }
	elm::vec3 getPosition() const				{ return position; }
	unsigned int getSize() const				{ return points.size(); }
	unsigned int getIndexCount() const			{ return width * height * 6; }

	float getHeightAt(elm::vec2 pos) const;

	int getTreeDepth() { return maxDepth; }
=======
	const float getWidth() const				{ return width * step; }
	const float getHeight() const				{ return height * step; }
	const elm::vec3 getPosition() const			{ return position; }
	const unsigned int getSize() const			{ return points.size(); }
	const unsigned int getIndexCount() const	{ return (width - 1) * (height - 1) * 6; }

	const float getHeightAt(elm::vec2 pos) const;
>>>>>>> RESPECT_MAH_AUTHORITAH

	std::vector<Vertex> *getVBuffer()			{ return &vBuffer; }
	std::vector<uint>	*getIBuffer()			{ return &iBuffer; }

<<<<<<< HEAD
	const std::vector<elm::vec3> *getPoints() const { return &points; }
	const std::vector<uint>	*getIBuffer() const	{ return &iBuffer; }

	elm::vec2 getDim() { return elm::vec2(position.x + width * step, position.z + height * step); }

	void resetNormalizer() { normalizerHeight = -999999.f; }
	void createTerrain(int w, int h, float pointStep, bool fromPerlinMap, int seed);

	void applyElevationBrush(float radius, float intensity, elm::vec2 origin);
	void applyNormalizeBrush(float radius, float intensity, elm::vec2 origin);
	void applyDefaultNormalizeBrush(float radius, float intensity, elm::vec2 origin);
	void findMinMaxValues(std::vector<Quadnode*> &nodes);
=======
	void createTerrain(int w, int h, float pointStep, bool fromPerlinMap, int seed);

	void applyBrush(float radius, float intensity, elm::vec2 origin);
>>>>>>> RESPECT_MAH_AUTHORITAH
};