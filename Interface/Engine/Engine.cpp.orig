#include "Engine.h"

<<<<<<< HEAD
Engine::Engine() : lButtprev(false), rButtprev(false)
=======

Engine::Engine()
>>>>>>> something_something_dark_side
{
	mouseWorldPos = elm::vec3(200, 0, 1000);
	brushTexture = "";
	camera = nullptr;
	terrain = nullptr;
	dx = nullptr;
	selectedTool = Tools::ELEVATION;
	minmaxCalcDone = true;
}

void Engine::init()
{
	// create ref struct
	CModel<Object3D>* co = new CModel<Object3D>("test", dx->g_objects[0]);

	// create composition
	Composition c;
	c.setProperty(co);
}

void Engine::addHandels(HWND hWnd, std::string name, int width, int height)
{
	if(!dx)
		dx = new RenderDX11();
	
	dx->addHandle(hWnd, name, width, height);
	this->hWnd = hWnd;
}

void Engine::updateHandle(HWND hWnd, std::string name, int width, int height)
{
	dx->updateHandle(hWnd, name, width, height);
	dx->createAndSetTerrainBuffers(terrain->getVBuffer(), terrain->getIBuffer());
	this->hWnd = hWnd;
}

void Engine::createTerrain(int width, int height, float pointStep, bool fromPerlinMap, int seed)
{
	if(!terrain)
		terrain = new Terrain();

	terrain->createTerrain(width, height, pointStep, fromPerlinMap, seed);

	node = new Quadnode();
	node->fillTree(0, terrain->getIBuffer()->size(), terrain->getPosition().xz, terrain->getDim(), terrain->getTreeDepth());
	node->findAllLeaves(leafNodes);

	terrain->findMinMaxValues(leafNodes);

	dx->createAndSetTerrainBuffers(terrain->getVBuffer(), terrain->getIBuffer());

	if(!camera)
		camera = new Camera(width, height, terrain);

	dx->setTerrainIndexCount(terrain->getIndexCount());
	dx->setCamera(camera);
}

void Engine::resizeWindow(int width, int height)
{
	camera->resizeWindow(width, height);
	dx->resizeSurface(width, height, "main");
	dx->createAndSetTerrainBuffers(terrain->getVBuffer(), terrain->getIBuffer());
}

void Engine::setBrushIntensity(int _val)
{
	brushIntensity = _val;
}

void Engine::setBrushSize(int _val)
{
	brushSize = _val;
}

void Engine::setBrushTexture(std::string _val)
{
	brushTexture = _val;
}

void Engine::leftMouseDown()
{
	switch(selectedTool)
	{
	case Tools::ELEVATION:
		terrain->applyElevationBrush((float)brushSize, (float)brushIntensity / 100, mouseWorldPos.xz);
		dx->updateTerrainBuffer(terrain->getVBuffer());
		break;
	case Tools::NORMALIZER:
		terrain->applyNormalizeBrush((float)brushSize, brushIntensity, mouseWorldPos.xz);
		dx->updateTerrainBuffer(terrain->getVBuffer());
		break;
	}	

	if(minmaxCalcDone)
	{
		minmaxCalc = std::thread(&Engine::findMinMaxValues, this);
		minmaxCalc.detach();
	}

	camera->move(elm::vec2(0));
}

void Engine::rightMouseDown()
{
	switch(selectedTool)
	{
	case Tools::ELEVATION:
		terrain->applyElevationBrush((float)brushSize, -(float)brushIntensity / 100, mouseWorldPos.xz);
		dx->updateTerrainBuffer(terrain->getVBuffer());
		break;
	case Tools::NORMALIZER:
		terrain->applyDefaultNormalizeBrush((float)brushSize, brushIntensity, mouseWorldPos.xz);
		dx->updateTerrainBuffer(terrain->getVBuffer());
		break;
	case Tools::TEXTURING:
		dx->blendmapBrush((float)brushSize, brushIntensity, mouseWorldPos.xz, "..\\Textures\\lavag.jpg", terrain->getStep());
		break;
	}


	if(minmaxCalcDone)
	{
		minmaxCalc = std::thread(&Engine::findMinMaxValues, this);
		minmaxCalc.detach();
	}

	camera->move(elm::vec2(0));

}

void Engine::leftMouseUp()
{
	switch(selectedTool)
	{
	case Tools::ELEVATION:
		break;
	case Tools::NORMALIZER:
		terrain->resetNormalizer();
		break;
	}
}

void Engine::rightMouseUp()
{
	switch(selectedTool)
	{
	case Tools::ELEVATION:
		break;
	case Tools::NORMALIZER:
		terrain->resetNormalizer();
		break;
	}
}

void Engine::move(float alongX, float alongZ)
{
	camera->move(elm::vec2(alongX, alongZ));
	mouseWorldPos = camera->getWorldPos(mousePos.x, mousePos.y, node);
}

void Engine::updateMouse()
{
	GetCursorPos(&mousePos);
	RECT win;
	GetWindowRect(hWnd, &win);

	bool lButt = (GetKeyState(VK_LBUTTON) & 0xA000);
	bool rButt = (GetKeyState(VK_RBUTTON) & 0xA000);

	mouseWorldPos = camera->getWorldPos(mousePos.x - win.left, mousePos.y - win.top, node);

	if(lButt && rectIntersect(win, mousePos))
		leftMouseDown();
	else
		leftMouseUp();		

	if(rButt && rectIntersect(win, mousePos))
		rightMouseDown();
	else
		rightMouseUp();	
}

void Engine::findMinMaxValues()
{
	minmaxCalcDone = false;
	terrain->findMinMaxValues(leafNodes);
	minmaxCalcDone = true;
}

bool Engine::rectIntersect(RECT _r, POINT _p)
{
	return (_r.bottom > _p.y && _r.top < _p.y && _r.left < _p.x && _r.right > _p.x);
}

Engine::~Engine()
{
	SAFE_DELETE(dx);
	SAFE_DELETE(node);
	SAFE_DELETE(camera);
	SAFE_DELETE(terrain);
}